//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LogiticsManagment.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LogisticManagmentEntities1 : DbContext
    {
        public LogisticManagmentEntities1()
            : base("name=LogisticManagmentEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Package> Packages { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Rate> Rates { get; set; }
        public virtual DbSet<Route> Routes { get; set; }
        public virtual DbSet<Shipment> Shipments { get; set; }
        public virtual DbSet<ShipmentVehicle> ShipmentVehicles { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<test> tests { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<VehicleRoute> VehicleRoutes { get; set; }
        public virtual DbSet<Warehouse> Warehouses { get; set; }
        public virtual DbSet<warehouse_inventory> warehouse_inventory { get; set; }
        public virtual DbSet<admin> admins { get; set; }
    
        public virtual int AddPackage(Nullable<int> warehouse_id, Nullable<int> order_id, string description, Nullable<decimal> weight, Nullable<decimal> length, Nullable<decimal> width, Nullable<decimal> height, Nullable<bool> fragile)
        {
            var warehouse_idParameter = warehouse_id.HasValue ?
                new ObjectParameter("warehouse_id", warehouse_id) :
                new ObjectParameter("warehouse_id", typeof(int));
    
            var order_idParameter = order_id.HasValue ?
                new ObjectParameter("order_id", order_id) :
                new ObjectParameter("order_id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(decimal));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("length", length) :
                new ObjectParameter("length", typeof(decimal));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("width", width) :
                new ObjectParameter("width", typeof(decimal));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("height", height) :
                new ObjectParameter("height", typeof(decimal));
    
            var fragileParameter = fragile.HasValue ?
                new ObjectParameter("fragile", fragile) :
                new ObjectParameter("fragile", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPackage", warehouse_idParameter, order_idParameter, descriptionParameter, weightParameter, lengthParameter, widthParameter, heightParameter, fragileParameter);
        }
    
        public virtual int AddRoute(string route_link)
        {
            var route_linkParameter = route_link != null ?
                new ObjectParameter("route_link", route_link) :
                new ObjectParameter("route_link", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRoute", route_linkParameter);
        }
    
        public virtual int AddShipment(Nullable<int> package_id, Nullable<int> customer_id, string destination_address, string destination_city_name, string source_city_name, Nullable<System.DateTime> shipment_date, string delivery_method, Nullable<System.DateTime> estimatedDeliveryDate)
        {
            var package_idParameter = package_id.HasValue ?
                new ObjectParameter("package_id", package_id) :
                new ObjectParameter("package_id", typeof(int));
    
            var customer_idParameter = customer_id.HasValue ?
                new ObjectParameter("customer_id", customer_id) :
                new ObjectParameter("customer_id", typeof(int));
    
            var destination_addressParameter = destination_address != null ?
                new ObjectParameter("destination_address", destination_address) :
                new ObjectParameter("destination_address", typeof(string));
    
            var destination_city_nameParameter = destination_city_name != null ?
                new ObjectParameter("destination_city_name", destination_city_name) :
                new ObjectParameter("destination_city_name", typeof(string));
    
            var source_city_nameParameter = source_city_name != null ?
                new ObjectParameter("source_city_name", source_city_name) :
                new ObjectParameter("source_city_name", typeof(string));
    
            var shipment_dateParameter = shipment_date.HasValue ?
                new ObjectParameter("shipment_date", shipment_date) :
                new ObjectParameter("shipment_date", typeof(System.DateTime));
    
            var delivery_methodParameter = delivery_method != null ?
                new ObjectParameter("delivery_method", delivery_method) :
                new ObjectParameter("delivery_method", typeof(string));
    
            var estimatedDeliveryDateParameter = estimatedDeliveryDate.HasValue ?
                new ObjectParameter("EstimatedDeliveryDate", estimatedDeliveryDate) :
                new ObjectParameter("EstimatedDeliveryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddShipment", package_idParameter, customer_idParameter, destination_addressParameter, destination_city_nameParameter, source_city_nameParameter, shipment_dateParameter, delivery_methodParameter, estimatedDeliveryDateParameter);
        }
    
        public virtual int AddVehicle(string vehicle_number, Nullable<decimal> capacity, string status, Nullable<int> vehicle_city_id)
        {
            var vehicle_numberParameter = vehicle_number != null ?
                new ObjectParameter("vehicle_number", vehicle_number) :
                new ObjectParameter("vehicle_number", typeof(string));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("capacity", capacity) :
                new ObjectParameter("capacity", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var vehicle_city_idParameter = vehicle_city_id.HasValue ?
                new ObjectParameter("vehicle_city_id", vehicle_city_id) :
                new ObjectParameter("vehicle_city_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVehicle", vehicle_numberParameter, capacityParameter, statusParameter, vehicle_city_idParameter);
        }
    
        public virtual int AddWarehouseInventory(Nullable<int> package_id, string category, Nullable<int> shelfNo, Nullable<int> rowNo, Nullable<int> columnNo)
        {
            var package_idParameter = package_id.HasValue ?
                new ObjectParameter("package_id", package_id) :
                new ObjectParameter("package_id", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var shelfNoParameter = shelfNo.HasValue ?
                new ObjectParameter("ShelfNo", shelfNo) :
                new ObjectParameter("ShelfNo", typeof(int));
    
            var rowNoParameter = rowNo.HasValue ?
                new ObjectParameter("RowNo", rowNo) :
                new ObjectParameter("RowNo", typeof(int));
    
            var columnNoParameter = columnNo.HasValue ?
                new ObjectParameter("ColumnNo", columnNo) :
                new ObjectParameter("ColumnNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddWarehouseInventory", package_idParameter, categoryParameter, shelfNoParameter, rowNoParameter, columnNoParameter);
        }
    
        public virtual int AssignRouteToVehicle(Nullable<int> vehicle_id, Nullable<int> route_id, Nullable<System.DateTime> assignment_date)
        {
            var vehicle_idParameter = vehicle_id.HasValue ?
                new ObjectParameter("vehicle_id", vehicle_id) :
                new ObjectParameter("vehicle_id", typeof(int));
    
            var route_idParameter = route_id.HasValue ?
                new ObjectParameter("route_id", route_id) :
                new ObjectParameter("route_id", typeof(int));
    
            var assignment_dateParameter = assignment_date.HasValue ?
                new ObjectParameter("assignment_date", assignment_date) :
                new ObjectParameter("assignment_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssignRouteToVehicle", vehicle_idParameter, route_idParameter, assignment_dateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> CalculateChargess(string origin_city_name, string destination_city_name, Nullable<decimal> weight, string delivery_method)
        {
            var origin_city_nameParameter = origin_city_name != null ?
                new ObjectParameter("origin_city_name", origin_city_name) :
                new ObjectParameter("origin_city_name", typeof(string));
    
            var destination_city_nameParameter = destination_city_name != null ?
                new ObjectParameter("destination_city_name", destination_city_name) :
                new ObjectParameter("destination_city_name", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(decimal));
    
            var delivery_methodParameter = delivery_method != null ?
                new ObjectParameter("delivery_method", delivery_method) :
                new ObjectParameter("delivery_method", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CalculateChargess", origin_city_nameParameter, destination_city_nameParameter, weightParameter, delivery_methodParameter);
        }
    
        public virtual int CalculateCityDistance(Nullable<int> originCityID, Nullable<int> destinationCityID, ObjectParameter distance)
        {
            var originCityIDParameter = originCityID.HasValue ?
                new ObjectParameter("OriginCityID", originCityID) :
                new ObjectParameter("OriginCityID", typeof(int));
    
            var destinationCityIDParameter = destinationCityID.HasValue ?
                new ObjectParameter("DestinationCityID", destinationCityID) :
                new ObjectParameter("DestinationCityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculateCityDistance", originCityIDParameter, destinationCityIDParameter, distance);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> CalculateEstimatedDeliveryDate(string origin_city, string destination_city, string delivery_method)
        {
            var origin_cityParameter = origin_city != null ?
                new ObjectParameter("origin_city", origin_city) :
                new ObjectParameter("origin_city", typeof(string));
    
            var destination_cityParameter = destination_city != null ?
                new ObjectParameter("destination_city", destination_city) :
                new ObjectParameter("destination_city", typeof(string));
    
            var delivery_methodParameter = delivery_method != null ?
                new ObjectParameter("delivery_method", delivery_method) :
                new ObjectParameter("delivery_method", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("CalculateEstimatedDeliveryDate", origin_cityParameter, destination_cityParameter, delivery_methodParameter);
        }
    
        public virtual int DeleteWarehouse(Nullable<int> warehouse_id)
        {
            var warehouse_idParameter = warehouse_id.HasValue ?
                new ObjectParameter("warehouse_id", warehouse_id) :
                new ObjectParameter("warehouse_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteWarehouse", warehouse_idParameter);
        }
    
        public virtual int LoadShipmentOntoVehicle(Nullable<int> shipment_id, Nullable<int> vehicle_id, Nullable<System.DateTime> load_date, string status)
        {
            var shipment_idParameter = shipment_id.HasValue ?
                new ObjectParameter("shipment_id", shipment_id) :
                new ObjectParameter("shipment_id", typeof(int));
    
            var vehicle_idParameter = vehicle_id.HasValue ?
                new ObjectParameter("vehicle_id", vehicle_id) :
                new ObjectParameter("vehicle_id", typeof(int));
    
            var load_dateParameter = load_date.HasValue ?
                new ObjectParameter("load_date", load_date) :
                new ObjectParameter("load_date", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadShipmentOntoVehicle", shipment_idParameter, vehicle_idParameter, load_dateParameter, statusParameter);
        }
    
        public virtual int RemovePackage(Nullable<int> package_id)
        {
            var package_idParameter = package_id.HasValue ?
                new ObjectParameter("package_id", package_id) :
                new ObjectParameter("package_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemovePackage", package_idParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UnloadShipmentFromVehicle(Nullable<int> shipment_id, Nullable<int> vehicle_id, Nullable<System.DateTime> unload_date, string status)
        {
            var shipment_idParameter = shipment_id.HasValue ?
                new ObjectParameter("shipment_id", shipment_id) :
                new ObjectParameter("shipment_id", typeof(int));
    
            var vehicle_idParameter = vehicle_id.HasValue ?
                new ObjectParameter("vehicle_id", vehicle_id) :
                new ObjectParameter("vehicle_id", typeof(int));
    
            var unload_dateParameter = unload_date.HasValue ?
                new ObjectParameter("unload_date", unload_date) :
                new ObjectParameter("unload_date", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnloadShipmentFromVehicle", shipment_idParameter, vehicle_idParameter, unload_dateParameter, statusParameter);
        }
    
        public virtual int UpdateShipmentStatus(Nullable<int> shipment_id, string status, Nullable<System.DateTime> actual_delivery_date)
        {
            var shipment_idParameter = shipment_id.HasValue ?
                new ObjectParameter("shipment_id", shipment_id) :
                new ObjectParameter("shipment_id", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var actual_delivery_dateParameter = actual_delivery_date.HasValue ?
                new ObjectParameter("actual_delivery_date", actual_delivery_date) :
                new ObjectParameter("actual_delivery_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateShipmentStatus", shipment_idParameter, statusParameter, actual_delivery_dateParameter);
        }
    }
}
